struct PairArray<First, Second> {
  private var first: [First] = []

  private var second: [Second] = []

  public init() {}

  public subscript(i: Int) -> (First, Second) { return (first[i], second[i]) }

  public var count: Int { first.count }

  public mutating func append(_ x: (First, Second)) {
    first.append(x.0)
    second.append(x.1)
  }
}

class PairArray<First, Second> {
  private first: First[] = []

  private second: Second[] = []

  public constructor() {}

  public get(i: number): [First, Second] { return [this.first[i], this.second[i]] }

  public get length(): number { return this.first.length }

  public push(x: [First, Second]) {
    this.first.push(x[0])
    this.second.push(x[1])
  }
}

const x = new PairArray<number, number>();
x.push([1, 2]);
console.log(x.get(0));

from typing import *

First = TypeVar('First')
Second = TypeVar('Second')

class PairList(Generic[First, Second]):
    __first: List[First]
    __second: List[Second]

    def __init__(self):
        self.__first = []
        self.__second = []

    def __getitem__(self, i) -> Tuple[First, Second]: return (self.__first[i], self.__second[i])

    def __len__(self): return len(self.__first)

    def append(self, x: Tuple[First, Second]):
        self.__first.append(x[0])
        self.__second.append(x[1])

l: PairList[int, str] = PairList()
l.append((1, "foo"))
l.append((2, "bar"))

#include <vector>
#include <utility>

template <class First, class Second>
class pair_vector {
private:
  std::vector<First> first = std::vector<First>();
  std::vector<Second> second = std::vector<Second>();

public:
  pair_vector() {}

  auto operator [] (std::size_t i) const -> std::pair<First, Second> {
    return std::make_pair(first[i], second[i]);
  }

  auto size() const -> std::size_t { return first.size(); }

  void push_back(std::pair<First, Second> x) {
    first.push_back(x.first);
    second.push_back(x.second);
  }
};
